% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simLakeP.R
\name{findCrit}
\alias{findCrit}
\title{Find Critical Values}
\usage{
findCrit(pars, critRange = c(0.01, 10), tol = .Machine$double.eps^0.5,
  nGrid = 1e+06, xRange = c(0, 100))
}
\arguments{
\item{pars}{parameters to be supplied to \code{\link{modelDeterministicXM}}; if not supplied, default values for s, m, r, h, b, and q are used.}

\item{critRange}{range of values in I over which to search for critical I}

\item{tol}{numeric scalar. Tolerance value passed to \code{\link{optimize}} when search for equilibria in X (via f(X)=dX/dt) that match the X values in f'(X)=0.}

\item{nGrid}{integer, scalar. Passed to \code{rootSolve::uniroot.all} as 'n', 'the number of subintervals in which the root is sought', when finding the values roots of dX/dt (the equilibria) and when finding the roots of f'(X) (the values of X for the critical values of I). This argument has a substantial effect on computation time. The default is relatively high.}

\item{xRange}{range of X values to search when looking for roots of f(X) and f'(X).}
}
\value{
numeric, critical value(s)
}
\description{
Find the critical vlaues of phosphorus input (I) at which new equilibria in X either emerge or collide/ disappear
}
\details{
A function f(X) = dX/dt gives the rate of change in water P (X) per unit time when the rate of change in sediment P is 0. Thus, when f(X)=0, the system is at equilibrium (both dX/dt and dM/dt are 0, thus system is not changing). The function f(X) also depends on system parameters, such as P input (I). The derivative of f(X) with respect to X is f'(X); f'(X) does not depend on I, and when f'(X)=0, f(X) is obviously not changing, meaning the rate of change in X is constant. Because f'(X) does not depend on I, the roots of f'(X) are values in X that do not change with I. When both f(X) and f'(X) are 0, I has reached a value at which the equilibrium values in X have either just emerged or are just about to dissappear. When a system exists at an equilibrium that is on the brink of disppearing, it is said to have reached a tipping point. The values of a parameter, such as I, that correspond to the these tipping points are the critical values of I. Note that a system may or may not be at a tipping point when a critical value of I is reached --- the tipping point only happens when the equilibrium value corresponding to the current state disappears, and so depends upon both the direction of change in the bifurcation parameter (I) as well as, in the case of bistability, the current state of the system (always depends on state of system, but state is implied by the parameter I in regions of I where there is only 1 equilibrium).  
  
This function works by first finding the values of X that satisfy f'(X) = 0; remember, f'(X) does not depend on I. These roots are found using \code{rootSolve::uniroot.all}. The next step involves finding equilibria of at various values of I (by searching through values of X that satisfy f(X)=0, and repeating this search for many values of I). Near a critical point, two equilibria will have very similar X values, and these values will also be very close the the values of X that satisfy f'(X)=0. Thus, the final step is to find the values of I that minimize the absolute deviation between the roots of f(X) (the equilibria) and the roots of f'(X). Note that when there are multiple roots, there are several absolute deviations; of these, the minimum is used. Unlike the first two steps, which use algorithms suited to finding when a function *crosses* the zero line, the last step involves a more generic optimization problem because the aforementioned absolute deviations, do not vary smoothly with I, forming discontinuities between the objective and the parameter to be optimized. Thus, for the last step \code{stats::optimize} is used to find the value of I that minimizes the minimum absolute deviation between the roots of f(X) and f'(X)
}

